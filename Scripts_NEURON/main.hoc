{load_file("BgGen.hoc")}
{load_file("nrngui.hoc")}
{load_file("LAcells_template.hoc")}
{load_file("interneuron_template.hoc")}
{load_file("class_axoaxoniccell.hoc")}


dt = 0.05
steps_per_ms = 20
v_init = -70
SaveDataDt = 0.5
tstop = 500

objref pc, cellslist, cell, nil, nc




pc = new ParallelContext()

strdef FileLocationStr_InternalSynConns
FileLocationStr_InternalSynConns = "Data_InternalSynConns.txt"

strdef FileLocationStr_InternalWgtConns
FileLocationStr_InternalWgtConns = "Data_InternalWgtConns.txt"

strdef FileLocationStr_InternalThrConns
FileLocationStr_InternalThrConns = "Data_InternalThrConns.txt"

strdef FileLocationStr_InternalDelConns
FileLocationStr_InternalDelConns = "Data_InternalDelConns.txt"

objref Internalnclist, InternalSynList, CurrentRec, bgsyn, bgnc
Internalnclist = new List()
InternalSynList = new List()


N_CELL = 2134
N_Pyramidal = 1707
N_PVBasket = 170
N_Chandelier = 21
N_Calretinin = 128
N_CCK = 54
N_Somatostatin = 54

///////////// BACKGROUND NOISE ////////////////
objref bggen[N_CELL], bgnc[N_CELL], bgsyn[N_CELL]
///////////////////////////////////////////////

cellslist = new List()
objref axonCurrent, vclamp, inhaxonCurrent[N_Chandelier]

for (i = pc.id; i < N_CELL; i+= pc.nhost){
	if (i < N_Pyramidal){
		printf("creating cell%i",i)
		printf("on host number%i",pc.id)
		cell = new Cell_C()
		//$1 - frequency, $2 - noise start time
		//bggen[i] = new BgGen(5,0,tstop,5,dt,i)
		//cell.axon bgsyn[i] = new BG_ALL(0.9)
		//bgsyn[i].initW=0.5
		//bgnc[i] = new NetCon(bggen[i].intfire1,bgsyn[i],1,0,1)
	}else if (i >= N_Pyramidal && i < N_Pyramidal+N_PVBasket){
		cell = new axoaxoniccell()
		//$1 - frequency, $2 - noise start time
		//bggen[i] = new BgGen(5,0,tstop,5,dt,i)
		//cell.soma bgsyn[i] = new BG_ALL(0.9)
		//bgsyn[i].initW=6
		//bgnc[i] = new NetCon(bggen[i].intfire1,bgsyn[i],1,0,2)
	}else if (i >= N_Pyramidal+N_PVBasket &&  i < N_Pyramidal+N_PVBasket+N_Chandelier){
		if(i!=N_Pyramidal+N_PVBasket+2){
			cell = new axoaxoniccell()
			//access cell.soma
			//inhaxonCurrent[i-(N_Pyramidal+N_PVBasket)]=new IClamp(0.5)
			//inhaxonCurrent[i-(N_Pyramidal+N_PVBasket)].dur = 150
			//inhaxonCurrent[i-(N_Pyramidal+N_PVBasket)].del = 260
			//inhaxonCurrent[i-(N_Pyramidal+N_PVBasket)].amp = -10
		}
		//$1 - frequency, $2 - noise start time
		//bggen[i] = new BgGen(5,0,tstop,5,dt,i)
		//cell.soma bgsyn[i] = new BG_ALL(0.9)
		//bgsyn[i].initW=6
		//bgnc[i] = new NetCon(bggen[i].intfire1,bgsyn[i],1,0,2)
	// Place current clamp on first chandelier cell
		if ((i == N_Pyramidal+N_PVBasket+1)){
			access cell.soma
			axonCurrent=new IClamp(0.1)
			axonCurrent.dur = 22
			axonCurrent.del = 200
			axonCurrent.amp = 0.14
		}	
		// Place voltage clamp on second chandelier cell
		if (i == N_Pyramidal+N_PVBasket+2){
			cell.soma vclamp = new SEClamp(0.5)
			vclamp.rs = .1 // Mohm:series resistance should be much smaller than input resistance of the cell
			vclamp.dur1 = 0
			vclamp.amp1 = -70
			vclamp.dur2 = tstop
			vclamp.amp2 = -70
			vclamp.dur3 = 0
			vclamp.amp3 = -70
		}	
	}else if (i >= N_Pyramidal+N_PVBasket+N_Chandelier && i < N_Pyramidal+N_PVBasket+N_Chandelier+N_Calretinin){
		cell = new axoaxoniccell()
		//$1 - frequency, $2 - noise start time
		//bggen[i] = new BgGen(5,0,tstop,5,dt,i)
		//cell.soma bgsyn[i] = new BG_ALL(0.9)
		//bgsyn[i].initW=6
		//bgnc[i] = new NetCon(bggen[i].intfire1,bgsyn[i],1,0,2)
	}else if (i >= N_Pyramidal+N_PVBasket+N_Chandelier+N_Calretinin && i < N_Pyramidal+N_PVBasket+N_Chandelier+N_Calretinin+N_CCK){
		cell = new axoaxoniccell()
		//$1 - frequency, $2 - noise start time
		//bggen[i] = new BgGen(5,0,tstop,5,dt,i)
		//cell.soma bgsyn[i] = new BG_ALL(0.9)
		//bgsyn[i].initW=6
		//bgnc[i] = new NetCon(bggen[i].intfire1,bgsyn[i],1,0,2)
	}else {
		cell = new axoaxoniccell()
		//$1 - frequency, $2 - noise start time
		//bggen[i] = new BgGen(5,0,tstop,5,dt,i)
		//cell.soma bgsyn[i] = new BG_ALL(0.9)
		//bgsyn[i].initW=6
		//bgnc[i] = new NetCon(bggen[i].intfire1,bgsyn[i],1,0,2)
	}	
	cellslist.append(cell)
	pc.set_gid2node(i, pc.id)
	
	nc = cell.connect2target(nil)   ///for gid_connect between gids
	nc.delay = 0
	nc.weight = 1
	pc.cell(i, nc)
}


printf("Connecting Cells")
{load_file("InternalConnections.hoc")}

ConnectCells(InternalSynList, Internalnclist)
	
objref tvec, idvec 										// will be Vectors that record all spike times (tvec)
														// and the corresponding id numbers of the cells that spiked (idvec)
proc spikerecord() {local i localobj nc, nil

	tvec = new Vector()
	idvec = new Vector()
	for i=0, cellslist.count-1 {
	  nc = cellslist.object(i).connect2target(nil)
	  nc.record(tvec, idvec, nc.srcgid)
														// the Vector will continue to record spike times even after the NetCon has been destroyed
	}
}

//Record voltage of the chandelier cells
objref Chan_VolVec[N_Chandelier], PyrAIS_VolVec[N_Pyramidal], INT_VolVec[N_CELL-N_Pyramidal]
objref Chan_VolList, PyrAIS_VolList, INT_VolList

Chan_VolList = new List()
PyrAIS_VolList = new List()
INT_VolList = new List()
vol_step= 0.5

proc volv() { localobj cellid
   for i = 0,N_CELL-1 {
	   //Record Chandelier cells
	   /*
      if(pc.gid_exists(i) && i > N_Pyramidal + N_PVBasket - 1){
        cellid = pc.gid2cell(i)
		Chan_VolVec[i-(N_Pyramidal+N_PVBasket)] = new Vector()
		Chan_VolVec[i-(N_Pyramidal+N_PVBasket)].record(&cellid.soma.v(0.5),vol_step)
		Chan_VolList.append(Chan_VolVec[i-(N_Pyramidal+N_PVBasket)])
      }*/
	  if(pc.gid_exists(i) && i < N_Pyramidal){
		cellid = pc.gid2cell(i)
		PyrAIS_VolVec[i] = new Vector()
		PyrAIS_VolVec[i].record(&cellid.axon.v(0.5),vol_step)
		PyrAIS_VolList.append(PyrAIS_VolVec[i])
	  }
	  
	  if(pc.gid_exists(i) && i > N_Pyramidal){
		cellid = pc.gid2cell(i)
		INT_VolVec[i-N_Pyramidal] = new Vector()
		INT_VolVec[i-N_Pyramidal].record(&cellid.soma.v(0.5),vol_step)
		INT_VolList.append(INT_VolVec[i-N_Pyramidal])
	  }
   }
}

volv()

objref CurrentRec
if (pc.gid_exists(N_Pyramidal+N_PVBasket+2)){
	CurrentRec = new Vector()
	CurrentRec.record(&vclamp.i)
}


{load_file("function_TimeMonitor.hoc")}
spikerecord()
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

//////////////////////////////////////////////
// Report simulation results /////////////////
//////////////////////////////////////////////
printf("Saving data")
// PROCEDURE TO SEND SPIKES TO A FILE "SPIKERASTER"
objref spikefile
spikefile = new File("../Data_Output/data")

if(pc.id==0){     //"wopen" once by node 0 to clear the contents of the file
	spikefile.wopen()
	spikefile.close()
}

proc spikefileout() { local i, rank
	{pc.barrier()} // wait for all hosts to get to this point

	for rank=0, pc.nhost-1 { // host 0 first, then 1, 2, etc.

		if (rank==pc.id) {
			for i=0, tvec.size-1 {
				spikefile.aopen()                               //"aopen" to append data
				spikefile.printf("%8.4f\t %d\n", tvec.x[i], idvec.x[i])
				spikefile.close()
			}
		}
		{pc.barrier()} // wait for all hosts to get to this point
	}
}

// PROCEDURE TO SAVE VOLTAGE
strdef vols
objref f_volChan[N_Chandelier], f_volPyrAIS[N_Pyramidal], f_volINT[N_CELL-N_Pyramidal]

proc Save_Vol() { local z
	for i = 0,N_CELL-1 {
		/*
		if(pc.gid_exists(i) && i >(N_Pyramidal+N_PVBasket-1)){
			f_volChan[i-(N_Pyramidal+N_PVBasket)] = new File()
			sprint(vols,"../Data_Output/Voltage/Voltage_%d",i)
			f_volChan[i-(N_Pyramidal+N_PVBasket)].wopen(vols)
			z=Chan_VolList.index(Chan_VolVec[i-(N_Pyramidal+N_PVBasket)])
			Chan_VolList.o[z].printf(f_volChan[i-(N_Pyramidal+N_PVBasket)])
			f_volChan[i-(N_Pyramidal+N_PVBasket)].close()
		}
		*/
		
		if(pc.gid_exists(i) && i < N_Pyramidal){
			f_volPyrAIS[i] = new File()
			sprint(vols,"../Data_Output/Voltage/Voltage_%d",i)
			f_volPyrAIS[i].wopen(vols)
			z=PyrAIS_VolList.index(PyrAIS_VolVec[i])
			PyrAIS_VolList.o[z].printf(f_volPyrAIS[i])
			f_volPyrAIS[i].close()
		}
		
		if(pc.gid_exists(i) && i > N_Pyramidal){
			f_volINT[i-N_Pyramidal] = new File()
			sprint(vols,"../Data_Output/Voltage/Voltage_%d",i)
			f_volINT[i-N_Pyramidal].wopen(vols)
			z=INT_VolList.index(INT_VolVec[i-N_Pyramidal])
			INT_VolList.o[z].printf(f_volINT[i-N_Pyramidal])
			f_volINT[i-N_Pyramidal].close()
		}
	}
}

strdef current
objref f_current

proc Save_Curr() { local z
	if(pc.gid_exists(N_Pyramidal+N_PVBasket+2)){
		f_current = new File()
		sprint(current,"../Data_Output/current") 
		f_current.wopen(current)
		CurrentRec.printf(f_current)
		f_current.close()
	}
}

spikefileout()

//Don't forget to uncomment volv() if you want to save voltages!
Save_Vol()
Save_Curr()

{pc.runworker()}
{pc.done()}
